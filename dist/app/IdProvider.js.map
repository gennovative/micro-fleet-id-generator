{"version":3,"sources":["app/IdProvider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,yEAAuG;AACvG,yEAAkF;AAClF,+DAAiE;AACjE,mFAA+F;AAE/F,+CAA4C;AAK5C,IAAa,UAAU,kBAAvB;IAUC,YACuC,eAAuC,EACrC,UAA4B;QAD9B,oBAAe,GAAf,eAAe,CAAwB;QACrC,eAAU,GAAV,UAAU,CAAkB;QAEpE,4BAAK,CAAC,gBAAgB,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;QAC3D,4BAAK,CAAC,gBAAgB,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;QACjD,IAAI,CAAC,MAAM,GAAG,IAAI,yBAAW,EAAE,CAAC;IACjC,CAAC;IAED;;OAEG;IACI,IAAI;QACV,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,0CAAI,CAAC,YAAY,CAAC,CAAC;QACnE,IAAI,CAAC,UAAU,GAAQ,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,0CAAI,CAAC,oBAAoB,CAAC,CAAC;QAC3E,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACI,UAAU;QAChB,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC1B,CAAC;IAED;;OAEG;IACI,OAAO;QACb,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;IAClC,CAAC;IAEM,KAAK;QACX,GAAG,CAAC,CAAC,IAAI,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClC,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC5B,MAAM,CAAC;YACR,CAAC;QACF,CAAC;IACF,CAAC;IAEM,UAAU;QAChB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,CAAC;IAC5C,CAAC;IAEM,WAAW;QACjB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;IAClC,CAAC;IAEM,UAAU;QAChB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;IACjC,CAAC;IAGa,WAAW,CAAC,OAAe;;YACxC,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,OAAO,CAAC;YACtC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,uCAAC,CAAC,MAAM,EAAE,uCAAC,CAAC,YAAY,EAAE;gBACpD,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI;gBAC7B,KAAK,EAAE,YAAU,CAAC,UAAU;aAC5B,CAAC;iBACD,IAAI,CAAC,CAAC,GAAiB,EAAE,EAAE;gBAC3B,0BAA0B;gBAC1B,MAAM,CAAC,IAAI,CAAC;YACb,CAAC,CAAC,CAAC;QACL,CAAC;KAAA;CACD,CAAA;AAxEe,qBAAU,GAAG,EAAE,CAAC;AAFnB,UAAU;IADtB,iCAAU,EAAE;IAYV,WAAA,6BAAM,CAAC,iCAAI,CAAC,eAAe,CAAC,CAAA;IAC5B,WAAA,6BAAM,CAAC,sCAAI,CAAC,iBAAiB,CAAC,CAAA;;GAZpB,UAAU,CA0EtB;AA1EY,gCAAU","file":"IdProvider.js","sourcesContent":["import { SvcSettingKeys as SvcS, ModuleNames as M, ActionNames as A } from 'back-lib-common-constants';\r\nimport { IConfigurationProvider, Types as ConT } from 'back-lib-common-contracts';\r\nimport { injectable, inject, Guard } from 'back-lib-common-util';\r\nimport { IDirectRpcCaller, IRpcResponse, Types as ComT } from 'back-lib-service-communication';\r\n\r\nimport { IdGenerator } from './IdGenerator';\r\n\r\n\r\n\r\n@injectable()\r\nexport class IdProvider implements IServiceAddOn {\r\n\r\n\tprivate static CACHE_SIZE = 10;\r\n\r\n\tprivate _addresses: string[];\r\n\tprivate _bigIntProm: Promise<string[]>;\r\n\r\n\t// TODO: Will implement remote ID generation later\r\n\tprivate _idGen: IdGenerator;\r\n\r\n\tconstructor(\r\n\t\t@inject(ConT.CONFIG_PROVIDER) private _configProvider: IConfigurationProvider,\r\n\t\t@inject(ComT.DIRECT_RPC_CALLER) private _rpcCaller: IDirectRpcCaller\r\n\t) {\r\n\t\tGuard.assertArgDefined('_configProvider', _configProvider);\r\n\t\tGuard.assertArgDefined('_rpcCaller', _rpcCaller);\r\n\t\tthis._idGen = new IdGenerator();\r\n\t}\r\n\r\n\t/**\r\n\t * @see IServiceAddOn.init\r\n\t */\r\n\tpublic init(): Promise<void> {\r\n\t\tthis._rpcCaller.name = this._configProvider.get(SvcS.SERVICE_SLUG);\r\n\t\tthis._addresses = <any>this._configProvider.get(SvcS.ID_SERVICE_ADDRESSES);\r\n\t\treturn Promise.resolve();\r\n\t}\r\n\r\n\t/**\r\n\t * @see IServiceAddOn.deadLetter\r\n\t */\r\n\tpublic deadLetter(): Promise<void> {\r\n\t\treturn Promise.resolve();\r\n\t}\r\n\r\n\t/**\r\n\t * @see IServiceAddOn.dispose\r\n\t */\r\n\tpublic dispose(): Promise<void> {\r\n\t\treturn this._rpcCaller.dispose();\r\n\t}\r\n\r\n\tpublic fetch(): Promise<void> {\r\n\t\tfor (let addr of this._addresses) {\r\n\t\t\tif (this.attempFetch(addr)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic nextBigInt(): string {\r\n\t\treturn this._idGen.nextBigInt().toString();\r\n\t}\r\n\r\n\tpublic nextShortId(): string {\r\n\t\treturn this._idGen.nextShortId();\r\n\t}\r\n\r\n\tpublic nextUuidv4(): string {\r\n\t\treturn this._idGen.nextUuidv4();\r\n\t}\r\n\r\n\r\n\tprivate async attempFetch(address: string): Promise<boolean> {\r\n\t\tthis._rpcCaller.baseAddress = address;\r\n\t\treturn this._rpcCaller.call(M.ID_GEN, A.NEXT_BIG_INT, {\r\n\t\t\t\tservice: this._rpcCaller.name,\r\n\t\t\t\tcount: IdProvider.CACHE_SIZE\r\n\t\t\t})\r\n\t\t\t.then((res: IRpcResponse) => {\r\n\t\t\t\t// resolve(<any>res.data);\r\n\t\t\t\treturn true;\r\n\t\t\t});\r\n\t}\r\n}"]}